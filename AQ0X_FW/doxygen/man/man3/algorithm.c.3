.TH "algorithm.c" 3 "Wed Oct 29 2014" "Version V0.0" "AQ0X" \" -*- nroff -*-
.ad l
.nh
.SH NAME
algorithm.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include '\&.\&.\\\&.\&.\\includes\\allheaders\&.h'\fP
.br
\fC#include '\&.\&.\\\&.\&.\\includes_prv\\aq0X\\algorithm_prv\&.h'\fP
.br
\fC#include '\&.\&.\\\&.\&.\\includes_prv\\aq0X\\srv_hwio_prv\&.h'\fP
.br
\fC#include 'dsp\&.h'\fP
.br
\fC#include <string\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBNETIVE_ARITHMETIC\fP   1"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBFloat32\fP \fBalgorithm_get_mean\fP (\fBUint16\fP *vector, \fBUint16\fP SIZE)"
.br
.RI "\fIcalculates mean value \fP"
.ti -1c
.RI "int meanVal \fB__attribute__\fP ((space(ymemory), far()))"
.br
.RI "\fIcalculates the standard deviation of the vector \fP"
.ti -1c
.RI "\fBFloat32\fP \fBalgorithm_get_std_deviation\fP (\fBUint16\fP *vector, \fBFloat32\fP mean_val, \fBUint16\fP SIZE)"
.br
.ti -1c
.RI "\fBBool\fP \fBalgorithm_signal_proportionality\fP (\fBUint16\fP *vector1, \fBUint16\fP *vector2, \fBUint16\fP SIZE)"
.br
.RI "\fIThe function calculate the relation between the given vectors and standard deviation of the resulting vector to determine the similarity between the two signals\&. \fP"
.ti -1c
.RI "void \fBalgorithm_sv_scan_timer_init\fP (void)"
.br
.RI "\fILow level analog\&. \fP"
.ti -1c
.RI "void \fBalgorithm_wake\fP (\fBUint8\fP event)"
.br
.RI "\fIMain processing loop for algorithm module\&. \fP"
.ti -1c
.RI "void \fBmsg_to_mem\fP (void *dest, \fBUint8\fP *msg, \fBUint16\fP size, \fBUint8\fP base)"
.br
.RI "\fIcopy serially received data to given memory address \fP"
.ti -1c
.RI "void \fBalgorithm_taskx\fP (\fBx_event\fP *event)"
.br
.RI "\fIAlgorithm task function\&. \fP"
.ti -1c
.RI "void \fBalgorithm_notifyx\fP (\fBx_notify\fP *notify)"
.br
.RI "\fIAlgorithm module notification function\&. \fP"
.ti -1c
.RI "void \fBalgorithm_message_arrived_ntf_isr\fP (\fBUint16\fP id)"
.br
.RI "\fICauses that system will send notification to the module as this cannot be done directly because the function is called from interrupt\&. \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBalgorithm_data_t\fP \fBalgorithm_data\fP"
.br
.ti -1c
.RI "\fBx_task_id\fP \fBalgorithm_id\fP"
.br
.RI "\fIALgorithm module handle\&. \fP"
.ti -1c
.RI "\fBlogv_t\fP \fBlogv\fP"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define NETIVE_ARITHMETIC   1"

.PP
Definition at line 27 of file algorithm\&.c\&.
.SH "Function Documentation"
.PP 
.SS "int meanVal __attribute__ ((space(ymemory), far()))"

.PP
calculates the standard deviation of the vector 
.SS "\fBFloat32\fP algorithm_get_mean (\fBUint16\fP *vector, \fBUint16\fPSIZE)"

.PP
calculates mean value 
.PP
Definition at line 47 of file algorithm\&.c\&.
.PP
.nf
48 {
49     
50     
51     register int result asm("A");
52     result = __builtin_clr();
53     Int16 cc;
54 
55     for(cc = 0;cc<SIZE;cc++)
56         result = __builtin_add(result,*(vector+cc),0);
57  
58     cc = __builtin_sac(result,0);
59 
60 
61     
62     Float32 mean_val = (Float32)cc/(Float32)SIZE ;
63     
64 
65     return  (mean_val);
66 
67 }
.fi
.SS "\fBFloat32\fP algorithm_get_std_deviation (\fBUint16\fP *vector, \fBFloat32\fPmean_val, \fBUint16\fPSIZE)"

.PP
Definition at line 96 of file algorithm\&.c\&.
.PP
Referenced by nov_set_default()\&.
.PP
.nf
97 {
98     Uint16 cc;
99 
100     fractional *vect                = (fractional *)vector;
101 
102     fractional  uval                = (fractional)(mean_val);
103 
104     Int16  tmp                      = 0;
105 
106     Int32  variance                 = 0;
107   
108     for(cc = 0;cc < SIZE ; cc++){
109           tmp       = ((*(vect+cc)) - uval);
110           variance += __builtin_mulss(tmp,tmp);
111     }
112 
113     Float32 result =  sqrt(((Float32)variance)/((Float32)SIZE));
114   
115     return result;
116 }
.fi
.SS "void algorithm_message_arrived_ntf_isr (\fBUint16\fPid)"

.PP
Causes that system will send notification to the module as this cannot be done directly because the function is called from interrupt\&. 
.PP
Definition at line 2104 of file algorithm\&.c\&.
.PP
References algorithm_id, algorithm_data_t::irq_src, and x_task_send_irq_sync()\&.
.PP
Referenced by __attribute__(), and algorithm_wake()\&.
.PP
.nf
2105 {
2106     if(id==0)
2107         return;
2108     if((0x00FF&id)!=0)
2109     algorithm_data\&.irq_src\&.fields\&.external = (0x00FF&id);
2110     else if(((0xFF00&id)>>8)!=0)
2111     algorithm_data\&.irq_src\&.fields\&.internal = ((0xFF00&id)>>8);
2112     x_task_send_irq_sync(algorithm_id);
2113 }
.fi
.SS "void algorithm_notifyx (\fBx_notify\fP *notify)"

.PP
Algorithm module notification function\&. 
.PP
\fBParameters:\fP
.RS 4
\fInotify\fP - system distributed notification
.RE
.PP
Services initialization notifications\&. Collects notifications from all other modules and internal OS timers (data is copied to internal data structures)\&. Such operation triggers sending wake event to main task to process notification data\&. 
.PP
Definition at line 2006 of file algorithm\&.c\&.
.PP
References algorithm_wake(), ASSERT, data_non_volatile, x_notify::message, x_notify_module_sv_status_report_t::message, algorithm_data_t::wake_event, X_NTF_ALG_ANALOG_SUPPLY_ALERT, X_NTF_INIT, X_NTF_IR_SENSOR_SV_ALART, X_NTF_LIGHT_SENSOR_SV_ALART, X_NTF_MFIELD_X_SENSOR_SV_ALART, X_NTF_MFIELD_Y_SENSOR_SV_ALART, X_NTF_SUPERVISION_TIMER, X_NTF_UV_SENSOR_SV_ALART, and x_send_event()\&.
.PP
Referenced by main()\&.
.PP
.nf
2007 {
2008 
2009     switch(notify->message)
2010     {
2011         // System standrd messages 
2012 
2013         case X_NTF_INIT:
2014         {
2015             // Module intialization    
2016             algorithm_init();            
2017         }break;
2018 
2019 
2020         case X_NTF_SUPERVISION_TIMER:
2021         {
2022            x_send_event(&algorithm_data\&.wake_event);
2023         }break;
2024 
2025         case  X_NTF_ALG_ANALOG_SUPPLY_ALERT:            
2026         {
2027             data_non_volatile\&.device_data\&.sv_record\&.system_error_flags\&.bits\&.power_supply = 1;
2028             algorithm_wake(0);
2029         }break;
2030 
2031 #if(DEVICE == AQ0X_V1)
2032          case  X_NTF_LIGHT_SENSOR_SV_ALART:
2033         {
2034             // supervission report indicating persistent error or when change is made on configured data
2035             x_notify_module_sv_status_report_t *alarm = (x_notify_module_sv_status_report_t *)notify;
2036             data_non_volatile\&.device_data\&.sv_record\&.error_flags\&.light = alarm->message\&.error_flags;
2037              x_send_event(&algorithm_data\&.wake_event);
2038         }break;
2039 
2040 #endif
2041          case  X_NTF_IR_SENSOR_SV_ALART:
2042         {
2043             // supervission report indicating persistent error or when change is made on configured data
2044             x_notify_module_sv_status_report_t *alarm = (x_notify_module_sv_status_report_t *)notify;
2045             data_non_volatile\&.device_data\&.sv_record\&.error_flags\&.ir = alarm->message\&.error_flags;
2046 
2047             if(alarm->message\&.config\&.amp_treshold\&.adjusted == 1)
2048                 data_non_volatile\&.device_data\&.installation\&.thresholds\&.ir_level_max
2049                  = alarm->message\&.config\&.amp_treshold\&.set_value;
2050 
2051         }break;
2052 
2053          case  X_NTF_UV_SENSOR_SV_ALART:
2054         {
2055             // supervission report indicating persistent error or when change is made on configured data
2056             x_notify_module_sv_status_report_t * alarm = (x_notify_module_sv_status_report_t *)notify;
2057             data_non_volatile\&.device_data\&.sv_record\&.error_flags\&.uv = alarm->message\&.error_flags;
2058 
2059              if(alarm->message\&.config\&.amp_treshold\&.adjusted == 1)
2060                 data_non_volatile\&.device_data\&.installation\&.thresholds\&.uv_level_max
2061                  =alarm->message\&.config\&.amp_treshold\&.set_value;
2062 
2063         }break;
2064 
2065         case  X_NTF_MFIELD_X_SENSOR_SV_ALART:
2066         {
2067             // supervission report indicating persistent error
2068             x_notify_module_sv_status_report_t * alarm = (x_notify_module_sv_status_report_t *)notify;
2069             data_non_volatile\&.device_data\&.sv_record\&.error_flags\&.mfield_x = alarm->message\&.error_flags;
2070       
2071         }break;
2072 
2073 #ifdef MFIELD_Y
2074         case  X_NTF_MFIELD_Y_SENSOR_SV_ALART:
2075         {        
2076             // supervission report indicating persistent error
2077             x_notify_module_sv_status_report_t * alarm = (x_notify_module_sv_status_report_t *)notify;
2078             data_non_volatile\&.device_data\&.sv_record\&.error_flags\&.mfield_y = alarm->message\&.error_flags;
2079             
2080         }break;
2081 #endif
2082 
2083         default:
2084         {
2085 
2086             ASSERT(0);
2087         }
2088         
2089     }
2090 }
.fi
.SS "\fBBool\fP algorithm_signal_proportionality (\fBUint16\fP *vector1, \fBUint16\fP *vector2, \fBUint16\fPSIZE)"

.PP
The function calculate the relation between the given vectors and standard deviation of the resulting vector to determine the similarity between the two signals\&. 
.PP
Definition at line 242 of file algorithm\&.c\&.
.PP
References FALSE, MAX_EVENT_OBSERVATION_LENGTH, and TRUE\&.
.PP
.nf
243 {
244 
245     Float32 vector[MAX_EVENT_OBSERVATION_LENGTH];
246     long double sum=0;
247     Uint8 cc = 0;
248   
249     for(cc = 0;cc < SIZE;cc++){
250         vector[cc] = (Float32)*(vector1 + cc)/(Float32)*(vector2 + cc);
251         sum += vector[cc];
252     }
253 
254     Float32 mean =  sum/SIZE;
255     sum = 0;
256     for(cc = 0;cc<SIZE;cc++)
257         sum += pow((vector[cc]-mean),2);
258 
259     Float32 deviation =  sum/SIZE;
260 
261     if(deviation < 0\&.1 /*less than 10% deviation*/)
262         return TRUE;
263     else
264         return FALSE;
265 
266 }
.fi
.SS "void algorithm_sv_scan_timer_init (void)"

.PP
Low level analog\&. 
.PP
Definition at line 543 of file algorithm\&.c\&.
.PP
References FOSC_CPU, and SCAN_FREQ\&.
.PP
.nf
544 {
545 
546     // Setup fast timer for analog level polling 
547 
548     T1CONbits\&.TON    = 0;                    // Disable Timer
549     T1CON            = 0;                    // Clear the register
550     T1CONbits\&.TCS    = 0;                    // Internal clock Fosc/4
551     T1CONbits\&.TGATE  = 0;                    // Disable Gated Timer mode
552     T1CONbits\&.TCKPS  = 0;                    // 1:1 prescaling
553 
554     TMR1             = 0x00;                 // Clear timer register
555 
556     PR1 = (FOSC_CPU/2)/SCAN_FREQ;
557 
558     IPC0bits\&.T1IP    = 0x06;                 // Set Timer1 Interrupt Priority Level
559     IFS0bits\&.T1IF    = 0;                    // Clear the Timer1 Interrupt Flag
560     IEC0bits\&.T1IE    = 1;                    // Enable Timer1 Interrupt Service Routine
561 
562 
563     T1CONbits\&.TON    = 1;                    //Start Timer 1
564 
565 }
.fi
.SS "void algorithm_taskx (\fBx_event\fP *event)"

.PP
Algorithm task function\&. Processes incoming events\&. more than 80% correlation is considered as strong similarity 
.PP
Definition at line 1905 of file algorithm\&.c\&.
.PP
References ASSERT, algorithm_data_t::clear_alarm_ir, algorithm_data_t::clear_alarm_mfield_x, algorithm_data_t::clear_alarm_uv, data_non_volatile, algorithm_data_t::diagnosis, logv_t::disturbance_record, FP_TOLERANCE, IRQ_DR_READY, IRQ_SOURCE_HIF_EVENT, IRQ_SOURCE_SERIAL, algorithm_data_t::irq_src, x_event::message, nov_store(), srv_wdg_kick, algorithm_data_t::supervision_timer, SV_TIMER_PERIOD, TRUE, x_delete_timer(), X_MS2TICK, X_MSG_CONFIGURE_EVENT, X_MSG_IRQ_SYNC, X_MSG_WAKE_EVENT, x_schedule_timer(), and x_send_notify()\&.
.PP
Referenced by main()\&.
.PP
.nf
1906 {
1907     switch(event->message)
1908     {
1909 
1910 
1911         case X_MSG_IRQ_SYNC:
1912         {
1913              srv_wdg_kick();
1914             if(algorithm_data\&.irq_src\&.fields\&.external != 0){
1915                     if(algorithm_data\&.irq_src\&.all == IRQ_SOURCE_SERIAL)
1916                     algorithm_cmd_handler();
1917 
1918                   algorithm_data\&.irq_src\&.fields\&.external = 0;
1919             }
1920 
1921 
1922 
1923             if(algorithm_data\&.irq_src\&.fields\&.internal != 0){
1924                     if(algorithm_data\&.irq_src\&.all == IRQ_SOURCE_HIF_EVENT){
1925                         Float32 result = algorithm_liner_correlation(&data_non_volatile\&.disturbance_record\&.hif_diagonesis_records,MAX_EVENT_OBSERVATION_LENGTH);
1926                        //if(algorithm_liner_correlation(&data_non_volatile\&.disturbance_record\&.hif_diagonesis_records,MAX_EVENT_OBSERVATION_LENGTH) > 80){
1927                          if(result >= 80){
1929                             algorithm_data\&.diagnosis\&.hif\&.flags\&.result = 1;
1930                             algorithm_data\&.diagnosis\&.hif\&.flags\&.ready  = 1;
1931                          }else{
1932                             algorithm_data\&.diagnosis\&.hif\&.flags\&.result = 0;
1933                             algorithm_data\&.diagnosis\&.hif\&.flags\&.ready  = 1;
1934                             memset(&data_non_volatile\&.disturbance_record\&.hif_diagonesis_records,0,sizeof(data_non_volatile\&.disturbance_record\&.hif_diagonesis_records));
1935                          }
1936                     }
1937                     else
1938                     if(algorithm_data\&.irq_src\&.all == IRQ_DR_READY)
1939                     {
1940                         
1941                         nov_store();
1942                         logv\&.disturbance_record\&.bits\&.ready = 1;
1943                     }
1944 
1945                     algorithm_data\&.irq_src\&.fields\&.internal = 0;
1946          }
1947         }break;
1948 
1949 
1950 
1951         case X_MSG_WAKE_EVENT:
1952         {
1953               if(algorithm_data\&.diagnosis\&.false_alarm\&.ir\&.cnt++ > FP_TOLERANCE)
1954               x_send_notify(&algorithm_data\&.clear_alarm_ir);
1955 
1956               if(algorithm_data\&.diagnosis\&.false_alarm\&.uv\&.cnt++ > FP_TOLERANCE)
1957               x_send_notify(&algorithm_data\&.clear_alarm_uv);
1958 
1959               if(algorithm_data\&.diagnosis\&.false_alarm\&.mfield_x\&.cnt++ > FP_TOLERANCE)
1960               x_send_notify(&algorithm_data\&.clear_alarm_mfield_x);
1961 
1962 
1963 
1964 
1965         }break;
1966 
1967 
1968         case X_MSG_CONFIGURE_EVENT:
1969         {
1970             algorithm_configure();
1971             data_non_volatile\&.device_data\&.installation\&.is_valid = TRUE;
1972 
1973 #if(0)
1974           x_delete_timer(&algorithm_data\&.supervision_timer);
1975           x_schedule_timer(&algorithm_data\&.supervision_timer,X_MS2TICK(SV_TIMER_PERIOD));
1976 #endif
1977         }break;
1978     
1979         default:
1980         {
1981             ASSERT(0);
1982         }break;
1983     
1984     };
1985 
1986 }
.fi
.SS "void algorithm_wake (\fBUint8\fPevent)"

.PP
Main processing loop for algorithm module\&. Processes events by examining bitfields for various notification reasons\&. more than 80% correlation is considered as strong similarity
.PP
After a valid trip, disturbance recorder data will be will be saved to the memory address allocated for this purpose\&. The process will take some time depending on the size of the data\&. Hence, delay counter will be armed so as to transfer the data to non volatile memory when ready\&.
.PP
disturbance record data ready, low priority function will be used, to transfer the data to non volatile memory\&.
.PP
reset emulation trip for comunication purpose 
.PP
Definition at line 670 of file algorithm\&.c\&.
.PP
References algorithm_message_arrived_ntf_isr(), ASSERT, data_non_volatile, algorithm_data_t::diagnosis, logv_t::disturbance_record, DR_RECHECK, DR_RECHECK_TIME, srv_hwio_data_t::emulation_mode, EVENT_CLEARED, EVENT_SV_ALARM, FALSE, HIF, HOT, HWIO_ALARM_OFF, HWIO_ALARM_ON, hwio_execute_gpio_task(), ir_record_reset(), ir_sen_hif_check(), IRQ_CTX_T, IRQ_DISABLE, IRQ_DR_READY, IRQ_ENABLE, IRQ_SOURCE_HIF_EVENT, algorithm_data_t::modules_state_sv, nov_store(), srv_hwio_data, STATE_0, logv_t::sv_delay, logv_t::tick, logv_t::trip_active, TRUE, TYPE_IR_MF, TYPE_IR_MF_UV, and logv_t::wr\&.
.PP
Referenced by __attribute__(), and algorithm_notifyx()\&.
.PP
.nf
671 {
672 
673     Bool result = FALSE;
674 
675     if((event == EVENT_SV_ALARM)&&(logv\&.trip_active == FALSE)){
676 
677         if(algorithm_data\&.modules_state_sv\&.ir_sen\&.fields\&.state == HOT){
678         switch(data_non_volatile\&.device_data\&.installation\&.trip_criteria\&.criterion\&.all)
679         {
680 
681                  case  TYPE_IR_MF:
682                 {
683                       if(
684                           
685                            (algorithm_data\&.modules_state_sv\&.mfield_x_sen\&.fields\&.state == HOT)                         
686                             &&
687                            (algorithm_data\&.modules_state_sv\&.uv_sen\&.fields\&.state > STATE_0)
688                            )
689                                 result = TRUE;
690                        else
691 
692 
693                        if(ir_sen_hif_check() > 2)
694                         result = TRUE;
695 
696                 }break;
697 
698                  case  TYPE_IR_MF_UV:
699                 {
700                    if(
701                         (algorithm_data\&.modules_state_sv\&.mfield_x_sen\&.fields\&.state == HOT)
702                         &&
703                         (algorithm_data\&.modules_state_sv\&.uv_sen\&.fields\&.state == HOT)
704                         )
705                             result = TRUE;
706                        else if((algorithm_data\&.modules_state_sv\&.uv_sen\&.fields\&.state == HOT))
707                        {
708 
709                                        if(algorithm_data\&.diagnosis\&.hif\&.flags\&.processing == 1){
710 
711                                            if(algorithm_data\&.diagnosis\&.hif\&.flags\&.ready  == TRUE){
712                                                 if(algorithm_data\&.diagnosis\&.hif\&.flags\&.result == TRUE)
713                                                 {
714                                                         algorithm_data\&.diagnosis\&.hif\&.flags\&.processing = 0;
715                                                         ir_record_reset(HIF);
716                                                         if((algorithm_data\&.modules_state_sv\&.uv_sen\&.fields\&.state == HOT))
717                                                         result = TRUE;
718 
719                                                 }
720                                               else
721                                                 {
722                                                     algorithm_data\&.diagnosis\&.hif\&.flags\&.processing = 0;
723 
724                                                     ir_record_reset(HIF);
725 
726                                                     algorithm_data_mark_false_postives();
727 
728 
729                                                 }
730                                           }
731 
732                                      }
733                                      else
734                                      {
735 
736                                                if((ir_sen_hif_check() > 0))
737                                                {
738 
739                                                    algorithm_data\&.diagnosis\&.hif\&.all = 0;
740                                                    algorithm_data\&.diagnosis\&.hif\&.flags\&.processing = 1;
741                                                        //linear correlation function requires about 200us to return,
742                                                        //therefore,low priority function will be used to execute this procedure
743                                                         algorithm_message_arrived_ntf_isr(IRQ_SOURCE_HIF_EVENT);
744 
745 
746                                                         //TODO:clear all timers
747                                                }
748 
749                                     }
750                       }else
751                           algorithm_data_mark_false_postives();
752 
753 
754                 }break;
755 
756 
757                  default:
758                 {
759 
760                       if(
761                         (algorithm_data\&.modules_state_sv\&.mfield_x_sen\&.fields\&.state == HOT)
762                         &&
763                         (algorithm_data\&.modules_state_sv\&.uv_sen\&.fields\&.state == HOT)
764                         )
765                             result = TRUE;
766                        else if((algorithm_data\&.modules_state_sv\&.uv_sen\&.fields\&.state == HOT))
767                        {
768 
769                            algorithm_data\&.diagnosis\&.hif_checklist\&.all = ir_sen_hif_check();
770 
771                            if((algorithm_data\&.diagnosis\&.hif_checklist\&.all > 0))
772                            {
773 
774                                IRQ_CTX_T   irq_ctx;
775                                IRQ_DISABLE(irq_ctx);
776                                  Float32 correlation_result = algorithm_liner_correlation(&data_non_volatile\&.disturbance_record\&.hif_diagonesis_records,MAX_EVENT_OBSERVATION_LENGTH);
777                                IRQ_ENABLE(irq_ctx);
778                                
779                                //linear correlation function requires about 236us to return,with 60MIP
780                                //therefore,we update global tick by 2 sample time
781                                logv\&.tick +=2;
782 
783                                  if(correlation_result >= 80){
785                                      result = TRUE;
786                                  }
787                                  else
788                                  if
789                                  (
790                                  (correlation_result > 50)
791                                  &&
792                                  algorithm_data\&.diagnosis\&.hif_checklist\&.bits\&.itoi
793                                  &&
794                                  algorithm_data\&.diagnosis\&.hif_checklist\&.bits\&.ptop
795                                  )
796                                 {
797                                   result = TRUE;
798                                 }
799                                  else
800                                 algorithm_data_mark_false_postives();
801 
802                                data_non_volatile\&.disturbance_record\&.hif_diagonesis_records\&.head = 0;
803                                data_non_volatile\&.disturbance_record\&.hif_diagonesis_records\&.mean_value = 0;
804 
805                            }
806 
807                                     
808                       }else if(algorithm_data\&.modules_state_sv\&.mfield_x_sen\&.fields\&.state == STATE_0){
809                             algorithm_data_mark_false_postives();
810                       } 
811                        
812 
813                 }break;
814 
815         }
816 
817 
818         }else if(algorithm_data\&.modules_state_sv\&.mfield_x_sen\&.fields\&.state == STATE_0){
819             if(algorithm_data\&.modules_state_sv\&.uv_sen\&.fields\&.state == HOT)
820             algorithm_data_mark_false_postives();
821         }
822         
823         
824         
825 
826 
827         if(result == TRUE){
828             hwio_execute_gpio_task(HWIO_ALARM_ON);
829             logv\&.trip_active   = TRUE;
830              logv\&.disturbance_record\&.bits\&.wr = TRUE;
837             memset(&algorithm_data\&.diagnosis\&.false_alarm,0,sizeof(algorithm_data\&.diagnosis\&.false_alarm));
838             logv\&.sv_delay\&.set  = TRUE;
839             logv\&.sv_delay\&.cnt  = DR_RECHECK_TIME;
840             logv\&.sv_delay\&.type = DR_RECHECK;
841 
842         }
843         
844     }else if(event == EVENT_CLEARED){
845 
846           hwio_execute_gpio_task(HWIO_ALARM_OFF);
847           logv\&.trip_active   = FALSE;
848           
849     }else if(event == DR_RECHECK){
850                     
851             if(
852               (algorithm_data\&.modules_state_sv\&.ir_sen\&.fields\&.post_act_data_ready == TRUE)
853              ){
854 
859            data_non_volatile\&.disturbance_record\&.new_dr = TRUE;
860            logv\&.disturbance_record\&.bits\&.wr = FALSE;
861        algorithm_message_arrived_ntf_isr(IRQ_DR_READY);
862 
864            if(srv_hwio_data\&.emulation_mode\&.enabled\&.all != 0)
865                srv_hwio_data\&.emulation_mode\&.enabled\&.all = 0;
866 
867 
868        }
869        else
870           ASSERT(0);
871 
872             logv\&.sv_delay\&.set  = FALSE;
873             logv\&.sv_delay\&.cnt  = 0;
874             logv\&.sv_delay\&.type = 0;
875 
876        
877 
878     }else if(event == 0/*internal event*/){
879 
880 #if(DEVICE == AQ0X_V1)
881     if(data_non_volatile\&.device_data\&.sv_record\&.system_error_flags\&.bits\&.power_supply == TRUE)
882        nov_store();
883 
885 #endif
886       
887     }
888 
889 }
.fi
.SS "void msg_to_mem (void *dest, \fBUint8\fP *msg, \fBUint16\fPsize, \fBUint8\fPbase)"

.PP
copy serially received data to given memory address 
.PP
Definition at line 950 of file algorithm\&.c\&.
.PP
References serial_make16(), and serial_make8()\&.
.PP
.nf
950                                                              {
951 
952  
953         Uint16 cc   = 0;
954         Uint16 var  = 0;
955         if(base == 8){
956         Uint8* dst8 = (Uint8*)dest;
957         for (var = 0; var < size; ++var) {         
958             *(dst8+var)= serial_make8(msg,cc);
959             cc +=2;
960         }
961         }
962         else if(base == 16){
963         Uint16* dst8 = (Uint16*)dest;    
964             
965         for (var = 0; var < size; ++var) {         
966             *(dst8+var)= serial_make16(msg,cc);
967             cc +=4;
968         }
969         }
970 
971 }
.fi
.SH "Variable Documentation"
.PP 
.SS "\fBalgorithm_data_t\fP algorithm_data"

.PP
Definition at line 33 of file algorithm\&.c\&.
.PP
Referenced by __attribute__(), and nov_set_default()\&.
.SS "\fBx_task_id\fP algorithm_id"

.PP
ALgorithm module handle\&. 
.PP
Definition at line 34 of file algorithm\&.c\&.
.PP
Referenced by algorithm_message_arrived_ntf_isr(), and main()\&.
.SS "\fBlogv_t\fP logv"

.PP
Definition at line 36 of file algorithm\&.c\&.
.PP
Referenced by __attribute__(), ir_sen_get_status(), light_sen_get_status(), mfield_x_sen_get_status(), and uv_sen_get_status()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for AQ0X from the source code\&.
