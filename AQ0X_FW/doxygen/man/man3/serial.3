.TH "serial" 3 "Wed Oct 29 2014" "Version V0.0" "AQ0X" \" -*- nroff -*-
.ad l
.nh
.SH NAME
serial \- communication 
The module is responsible for external serial communications\&.
.PP
The module is responsible for the device analog and digital input output opera-tions\&.
.PP
Here, two interface helper functions are provided for analog level reading and digital input output operations\&. Thus, other modules with the privilege to ac-cess hardware functionality uses these functions to for such purpose (see \fBhwio_get_analog()\fP and \fBhwio_execute_gpio_task()\fP)\&.
.PP
The module also supports hardware reading redirection to allow testing firmware functionality\&. Thus, user can replace real hardware reading with values supplied by serial commands so as to validate the software operation\&. In the case of analog signal emulation the module can accept up to 400 byte (200 samples) data per input and sequentially supply the values in circular manner instead of real hardware reading, that is under the condition in which if the sensory module monitoring the signal is running in emulation mode (see \fBhwio_get_analog()\fP)\&.
.PP
The module is responsible for external serial communications\&.
.PP
Here, two interface helper functions are provided for data transmission and reading incoming message (see \fBserial_send_response()\fP, serial_get_command(,,))\&.
.PP
In these application only algorithim module can access these functions\&. Basically the implemented operation principle is that, during receiver interrupt the module collects incoming data to receive buffer and sends interrupt notification to algorithm module after successful validation procedure (see _U1RXInterrupt())\&. On the other hand, for data transmission request the module copies the message to transmit buffer and starts sending out data on every transmit interrupt (see _U1TXInterrupt())\&. Here, sending can be configured in blocking mode or non-blocking mode\&. In the latter case data which can?t fit into the buffer will be lost (see serial_send(,))\&. Whereas, in the first case (the default) the serial message will be blocking till the transmission is completed\&. However, this doesn?t affect protection functionality serviced by high priority interrupt\&. 
