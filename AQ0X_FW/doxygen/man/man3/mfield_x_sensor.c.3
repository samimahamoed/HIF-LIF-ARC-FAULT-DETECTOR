.TH "mfield_x_sensor.c" 3 "Wed Oct 29 2014" "Version V0.0" "AQ0X" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mfield_x_sensor.c \- 
.PP
Module responsible for mfield x axis sensor element supervision\&.  

.SH SYNOPSIS
.br
.PP
\fC#include '\&.\&.\\\&.\&.\\includes\\allheaders\&.h'\fP
.br
\fC#include '\&.\&.\\\&.\&.\\includes_prv\\aq0X\\mfield_x_sensor_prv\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBmfield_x_sen_taskx\fP (\fBx_event\fP *event)"
.br
.RI "\fImodule task function\&. \fP"
.ti -1c
.RI "void \fBmfield_x_sen_notifyx\fP (\fBx_notify\fP *notify)"
.br
.RI "\fImodule notification function\&. \fP"
.ti -1c
.RI "\fBFloat32\fP \fBmfield_x_sen_first_order_derivative\fP (\fBInt16\fP final_val, \fBInt16\fP init_val)"
.br
.RI "\fIClaculate first order derivative\&. \fP"
.ti -1c
.RI "\fBFloat32\fP \fBmfield_x_sen_calc_probablity\fP (\fBUint16\fP event, \fBUint16\fP obs)"
.br
.RI "\fIClaculates the event probablity\&. \fP"
.ti -1c
.RI "\fBInt8\fP \fBmfield_x_compare\fP (\fBFloat32\fP num1, \fBFloat32\fP num2, \fBFloat32\fP tolerance)"
.br
.ti -1c
.RI "\fBevent_report_t\fP \fBmfield_x_sen_get_status\fP (\fBUint16\fP adc_value, \fBBool\fP save_event)"
.br
.RI "\fIfunction used to identify the measured signal waveform \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBmfield_x_sen_data_t\fP \fBmfield_x_sen_data\fP"
.br
.RI "\fIInternal mfield_x_sen module data\&. \fP"
.ti -1c
.RI "\fBx_task_id\fP \fBmfield_x_sen_id\fP"
.br
.RI "\fImfield_x_sen module handle \fP"
.in -1c
.SH "Detailed Description"
.PP 
Module responsible for mfield x axis sensor element supervision\&. 

Module responsible for mfield_x sensor element supervision\&.
.PP
Definition in file \fBmfield_x_sensor\&.c\fP\&.
.SH "Function Documentation"
.PP 
.SS "\fBInt8\fP mfield_x_compare (\fBFloat32\fPnum1, \fBFloat32\fPnum2, \fBFloat32\fPtolerance)"

.PP
\fBParameters:\fP
.RS 4
\fI\fP 
.RE
.PP

.PP
Definition at line 221 of file mfield_x_sensor\&.c\&.
.PP
References __COMPARE\&.
.PP
.nf
221                                                                     {
222 
223      return __COMPARE((num1 - num2),tolerance);
224    Float32 difference = num1 - num2;
225 
226    if(abs(difference) <= tolerance)
227     return  0;
228 
229    if(difference > 0/*num1 > num2*/)
230     return 1;
231 
232    if(difference < 0/*num1 < num2*/)
233     return -1;
234 
235    return -2;
236 }
.fi
.SS "\fBFloat32\fP mfield_x_sen_calc_probablity (\fBUint16\fPevent, \fBUint16\fPobs)"

.PP
Claculates the event probablity\&. 
.PP
\fBParameters:\fP
.RS 4
\fIevent,positive\fP event count value 
.br
\fIobs,total\fP number of observation 
.RE
.PP

.PP
Definition at line 191 of file mfield_x_sensor\&.c\&.
.PP
.nf
191                                                              {
192 
193     return (100L*((Float32)event/(Float32)obs));
194 }
.fi
.SS "\fBFloat32\fP mfield_x_sen_first_order_derivative (\fBInt16\fPfinal_val, \fBInt16\fPinit_val)"

.PP
Claculate first order derivative\&. 
.PP
\fBParameters:\fP
.RS 4
\fIad_value\fP 
.RE
.PP

.PP
Definition at line 178 of file mfield_x_sensor\&.c\&.
.PP
.nf
178                                                                            {
179      return ((Float32)final_val-(Float32)init_val);
180 }
.fi
.SS "\fBevent_report_t\fP mfield_x_sen_get_status (\fBUint16\fPadc_value, \fBBool\fPsave_event)"

.PP
function used to identify the measured signal waveform function supervise the status of the mfield sensor req REQ-1b: "when a valid trip is issued,for few handres of microseconds after trip data will be to the provided location\&.
.PP
Definition at line 276 of file mfield_x_sensor\&.c\&.
.PP
References __1ST_ORDER_DERIVATIVE, __COMPARE_ZERO, __PROBABLITY, configured_t::amp_treshold, ASSERT, pre_act_record_buffer_t::buffer, state_data_mfield_t::change_per_time, mfield_x_sen_data_t::configured, module_status_mfield_t::current, data_non_volatile, logv_t::data_tx_on_progress, configured_t::dfdt_treshold_impulse, configured_t::dfdt_treshold_max, configured_t::dfdt_treshold_min, mfield_x_sen_data_t::disturbance_record, logv_t::disturbance_record, pre_act_record_buffer_t::elapsed, EMU_MODE_DATA_LENGTH, module_disturbance_record_t::event_data, module_disturbance_record_t::event_positive_cnt, FALSE, event_report_t::fields, pre_act_record_buffer_t::head, HOT, logv, MFIELD_ADC_QUIESCENT_LEVEL, MFIELD_SEN_NOISE_DENSITY_LEVEL, configured_t::min_number_of_observation, mfield_x_sen_data_t::module_status, module_disturbance_record_t::observation_cnt, state_data_mfield_t::polarity, module_disturbance_record_t::post_act_data, POST_ACT_RECORD_BUFF_SIZE, module_disturbance_record_t::pre_act_data, PRE_ACT_RECORD_BUFF_SIZE, module_status_mfield_t::previous, configured_t::probablity_treshold_max, configured_t::probablity_treshold_min, module_status_mfield_t::projected, state_data_mfield_t::signal_level, state_data_mfield_t::state, STATE_0, STATE_1, STATE_2, STATE_3, pre_act_record_buffer_t::tail, logv_t::tick, TRUE, and logv_t::wr\&.
.SS "void mfield_x_sen_notifyx (\fBx_notify\fP *notify)"

.PP
module notification function\&. 
.PP
\fBParameters:\fP
.RS 4
\fInotify\fP - system distributed notification 
.RE
.PP

.PP
Definition at line 107 of file mfield_x_sensor\&.c\&.
.PP
References ASSERT, mfield_x_sen_data_t::configured, mfield_x_sen_data_t::disturbance_record, configured_t::element_status_sv_en, sv_error_flags_ut::flags_all, x_notify::message, x_notify_mfield_sen_configure::message, mfield_x_sen_data_t::module_status, module_status_mfield_t::projected, SCAN_FREQ, mfield_x_sen_data_t::sv_errors_flags, mfield_x_sen_data_t::sv_task_event, mfield_x_sen_data_t::sv_timer_ntf, SV_TIMER_PERIOD, configured_t::sys_freq, x_delete_timer(), X_MS2TICK, X_NTF_CLR_ALARM_MFIELD_SEN, X_NTF_INIT, X_NTF_MFIELD_SENSOR_SV_TIMER, X_NTF_MFIELD_X_SENSOR_CONFIG, x_schedule_timer(), and x_send_event()\&.
.PP
.nf
108 {
109 
110 
111     switch(notify->message)
112     {
113         case X_NTF_INIT:
114         {
115             mfield_x_sen_init();
116         }break;
117 
118 
119         case X_NTF_MFIELD_X_SENSOR_CONFIG:
120         {
121 
122               // Algorithm module configuration reading
123               x_notify_mfield_sen_configure * notify_configure = (x_notify_mfield_sen_configure *)notify;
124 
125               // Module configuration
126               mfield_x_sen_data\&.configured = notify_configure->message\&.configured;
127               mfield_x_sen_data\&.disturbance_record = notify_configure->message\&.disturbance_record;
128 
129 
130               mfield_x_sen_data\&.module_status\&.projected\&.angular_freq             = 2*PI*mfield_x_sen_data\&.configured\&.sys_freq;
131               mfield_x_sen_data\&.module_status\&.projected\&.samples_per_period       = (Uint16)(SCAN_FREQ/(Float32)(mfield_x_sen_data\&.configured\&.sys_freq));
132               mfield_x_sen_data\&.module_status\&.projected\&.samples_per_period_1_2   = mfield_x_sen_data\&.module_status\&.projected\&.samples_per_period/2;
133               mfield_x_sen_data\&.module_status\&.projected\&.samples_per_period_1_4   = mfield_x_sen_data\&.module_status\&.projected\&.samples_per_period/4;
134               mfield_x_sen_data\&.module_status\&.projected\&.samples_per_period_1_8   = mfield_x_sen_data\&.module_status\&.projected\&.samples_per_period/8;
135               // Clear supervison state ( so errors will be reported if module have internal error )
136               mfield_x_sen_data\&.sv_errors_flags\&.flags_all = 0;
137 
138               x_delete_timer(&mfield_x_sen_data\&.sv_timer_ntf);
139 
140               if(mfield_x_sen_data\&.configured\&.element_status_sv_en)
141               x_schedule_timer(&mfield_x_sen_data\&.sv_timer_ntf,X_MS2TICK(SV_TIMER_PERIOD));
142 
143         }break;
144 
145          case X_NTF_CLR_ALARM_MFIELD_SEN:
146         {
147 
148            // Algorithm module alarm reset request
149            //  mfield_x_sen_data\&.module_status\&.current\&.state = STATE_0;
150              mfield_x_sen_mark_false_postives();
151 
152 
153         }break;
154 
155 
156         case X_NTF_MFIELD_SENSOR_SV_TIMER:
157         {
158            x_send_event(&mfield_x_sen_data\&.sv_task_event);
159         }break;
160 
161 
162         default:
163         {
164             ASSERT(0);
165         }
166     }
167 
168 }
.fi
.SS "void mfield_x_sen_taskx (\fBx_event\fP *event)"

.PP
module task function\&. 
.PP
\fBParameters:\fP
.RS 4
\fIevent\fP - system distributed event 
.RE
.PP

.PP
Definition at line 71 of file mfield_x_sensor\&.c\&.
.PP
References ASSERT, sv_error_flags_ut::flags_all, x_event::message, x_notify_mfield_sen_sv_report::message, x_notify_mfield_sen_sv_report::notify, srv_wdg_kick, mfield_x_sen_data_t::sv_errors_flags, mfield_x_sen_data_t::sv_status_ntf, X_MSG_MFIELD_SENSOR_SV, and x_send_notify()\&.
.PP
.nf
72 {
73     switch(event->message)
74     {
75 
76         case X_MSG_MFIELD_SENSOR_SV:
77         {
78             srv_wdg_kick();
79             mfield_x_sen_sensor_element_sv_task();
80 
81             if(mfield_x_sen_data\&.sv_errors_flags\&.flags_all!=0){
82              mfield_x_sen_data\&.sv_status_ntf\&.message\&.error_status_flags = mfield_x_sen_data\&.sv_errors_flags;
83              // Send notification to Algorithm module about error
84              x_send_notify(&mfield_x_sen_data\&.sv_status_ntf\&.notify);
85              mfield_x_sen_data\&.sv_errors_flags\&.flags_all =0;
86             }
87 
88         }break;
89 
90         default:
91         {
92             ASSERT(0);
93         }
94     }
95 }
.fi
.SH "Variable Documentation"
.PP 
.SS "\fBmfield_x_sen_data_t\fP mfield_x_sen_data"

.PP
Internal mfield_x_sen module data\&. 
.PP
Definition at line 23 of file mfield_x_sensor\&.c\&.
.SS "\fBx_task_id\fP mfield_x_sen_id"

.PP
mfield_x_sen module handle 
.PP
Definition at line 24 of file mfield_x_sensor\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for AQ0X from the source code\&.
