.TH "mfield_z_sensor.c" 3 "Wed Oct 29 2014" "Version V0.0" "AQ0X" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mfield_z_sensor.c \- 
.PP
Module responsible for mfield x axis sensor element supervision\&.  

.SH SYNOPSIS
.br
.PP
\fC#include '\&.\&.\\\&.\&.\\includes\\allheaders\&.h'\fP
.br
\fC#include '\&.\&.\\\&.\&.\\includes_prv\\aq0X\\mfield_z_sensor_prv\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBmfield_z_sen_taskx\fP (\fBx_event\fP *event)"
.br
.RI "\fImfield sensor module task function\&. \fP"
.ti -1c
.RI "void \fBmfield_z_sen_notifyx\fP (\fBx_notify\fP *notify)"
.br
.RI "\fImfield module notification function\&. \fP"
.ti -1c
.RI "\fBFloat32\fP \fBmfield_z_sen_first_order_derivative\fP (\fBInt16\fP final_val, \fBInt16\fP init_val, \fBFloat32\fP period)"
.br
.RI "\fIClaculate first order derivative\&. \fP"
.ti -1c
.RI "\fBFloat32\fP \fBmfield_z_sen_calc_probablity\fP (\fBUint16\fP event, \fBUint16\fP obs)"
.br
.RI "\fIClaculates the event probablity\&. \fP"
.ti -1c
.RI "\fBBool\fP \fBmfield_z_zero_cross\fP (void)"
.br
.RI "\fIClaculate\&. \fP"
.ti -1c
.RI "\fBInt8\fP \fBmfield_z_compare\fP (\fBFloat32\fP num, \fBFloat32\fP given_num, \fBFloat32\fP tolerance)"
.br
.RI "\fIClaculate\&. \fP"
.ti -1c
.RI "\fBBool\fP \fBmfield_z_observation_time_window_expired\fP (void)"
.br
.RI "\fIClaculate\&. \fP"
.ti -1c
.RI "\fBFloat32\fP \fBmfield_z_input_signal\fP (void)"
.br
.RI "\fIClaculate\&. \fP"
.ti -1c
.RI "void \fBmfield_z_sen_sensor_element_sv_task\fP (void)"
.br
.RI "\fISupervise the status of the mfield sensor\&. \fP"
.ti -1c
.RI "void \fBmfield_z_sen_false_positive_correction_task\fP (void)"
.br
.RI "\fIchecks the number of false positives within supervision time window \fP"
.ti -1c
.RI "void \fBmfield_z_sen_mark_false_postives\fP (void)"
.br
.RI "\fIchecks the number of false positives within supervision (100ms | 5 cycle) time window \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBmfield_z_sen_data_t\fP \fBmfield_z_sen_data\fP"
.br
.RI "\fIInternal mfield_z_sen module data\&. \fP"
.ti -1c
.RI "\fBx_task_id\fP \fBmfield_z_sen_id\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Module responsible for mfield x axis sensor element supervision\&. 


.PP
Definition in file \fBmfield_z_sensor\&.c\fP\&.
.SH "Function Documentation"
.PP 
.SS "\fBInt8\fP mfield_z_compare (\fBFloat32\fPnum, \fBFloat32\fPgiven_num, \fBFloat32\fPtolerance)"

.PP
Claculate\&. 
.PP
\fBParameters:\fP
.RS 4
\fIad_value\fP 
.RE
.PP

.PP
Definition at line 223 of file mfield_z_sensor\&.c\&.
.PP
Referenced by mfield_z_input_signal()\&.
.PP
.nf
223                                                                         {
224 
225    if(((given_num-given_num*tolerance) <= num) && (num <= (given_num + given_num*tolerance)))
226        return 0;
227    if(num < (given_num-given_num*tolerance))
228        return -1;
229    if(num > (given_num+given_num*tolerance))
230        return 1;
231    return -2;
232 }
.fi
.SS "\fBFloat32\fP mfield_z_input_signal (void)"

.PP
Claculate\&. 
.PP
\fBParameters:\fP
.RS 4
\fIad_value\fP 
.RE
.PP
TODO: determine the frquency type and 
.PP
Definition at line 255 of file mfield_z_sensor\&.c\&.
.PP
References state_data_mfield_t::change_per_time, module_status_mfield_t::current, mfield_z_compare(), mfield_z_sen_data_t::module_status, module_status_mfield_t::projected, and state_data_mfield_t::signal_level\&.
.PP
.nf
255                                    {
256 
257     Float32 result;
258     Float32 current_signal_level = 0;
260               mfield_z_sen_data\&.module_status\&.projected\&.amplitude
261               = mfield_z_sen_data\&.module_status\&.current\&.change_per_time/
262                      (mfield_z_sen_data\&.module_status\&.projected\&.angular_freq
263                       *cos(mfield_z_sen_data\&.module_status\&.projected\&.angular_freq*mfield_z_sen_data\&.module_status\&.current\&.time)
264                       );
265 
266              current_signal_level = mfield_z_sen_data\&.module_status\&.projected\&.amplitude
267                *sin(mfield_z_sen_data\&.module_status\&.projected\&.angular_freq*mfield_z_sen_data\&.module_status\&.current\&.time);
268 
269           result =  mfield_z_compare((Float32)(mfield_z_sen_data\&.module_status\&.current\&.signal_level)
270                   ,current_signal_level,0\&.05/*TODO: user configurable*/);
271 
272           if(result == 0)
273               mfield_z_sen_data\&.module_status\&.projected\&.positive_cnt++;
274 
275           return result;
276 
277 }
.fi
.SS "\fBBool\fP mfield_z_observation_time_window_expired (void)"

.PP
Claculate\&. 
.PP
\fBParameters:\fP
.RS 4
\fIad_value\fP 
.RE
.PP

.PP
Definition at line 241 of file mfield_z_sensor\&.c\&.
.PP
References module_status_mfield_t::current, FALSE, mfield_z_sen_data_t::module_status, OBSERVATION_TIME_WINDOW, and TRUE\&.
.PP
.nf
241                                                    {
242 
243     return (mfield_z_sen_data\&.module_status\&.current\&.time <= OBSERVATION_TIME_WINDOW)?FALSE:TRUE;
244 }
.fi
.SS "\fBFloat32\fP mfield_z_sen_calc_probablity (\fBUint16\fPevent, \fBUint16\fPobs)"

.PP
Claculates the event probablity\&. 
.PP
\fBParameters:\fP
.RS 4
\fIad_value\fP 
.RE
.PP

.PP
Definition at line 191 of file mfield_z_sensor\&.c\&.
.PP
.nf
191                                                              {
192     return (Float32)event/(Float32)obs;
193 }
.fi
.SS "void mfield_z_sen_false_positive_correction_task (void)"

.PP
checks the number of false positives within supervision time window 
.PP
Definition at line 733 of file mfield_z_sensor\&.c\&.
.PP
Referenced by mfield_z_sen_taskx()\&.
.PP
.nf
733                                                       {
734 
735 
736 
737 }
.fi
.SS "\fBFloat32\fP mfield_z_sen_first_order_derivative (\fBInt16\fPfinal_val, \fBInt16\fPinit_val, \fBFloat32\fPperiod)"

.PP
Claculate first order derivative\&. 
.PP
\fBParameters:\fP
.RS 4
\fIad_value\fP 
.RE
.PP

.PP
Definition at line 179 of file mfield_z_sensor\&.c\&.
.PP
.nf
179                                                                                           {
180     return (Float32)(final_val-init_val)/period;
181 }
.fi
.SS "void mfield_z_sen_mark_false_postives (void)"

.PP
checks the number of false positives within supervision (100ms | 5 cycle) time window 
.PP
Definition at line 747 of file mfield_z_sensor\&.c\&.
.PP
References mfield_z_sen_data_t::configured, configured_t::dfdt_treshold_max, mfield_z_sen_data_t::diagonesis_records, mfield_z_sen_data_t::disturbance_record, module_disturbance_record_t::event_data, EXCEDED_AMP_TH, diagonesis_records_mfield_t::false_alarm, RANGE_MAX_32BIT, and RANGE_MAX_8BIT\&.
.PP
Referenced by mfield_z_sen_notifyx()\&.
.PP
.nf
747                                            {
748         if(mfield_z_sen_data\&.disturbance_record->event_data\&.event_history == EXCEDED_AMP_TH){
749                if(
750                 (mfield_z_sen_data\&.diagonesis_records\&.false_alarm\&.amp_max_exceded\&.cnt < RANGE_MAX_8BIT)
751                 &
752                 (mfield_z_sen_data\&.diagonesis_records\&.false_alarm\&.amp_max_exceded\&.accumulated_value < RANGE_MAX_32BIT)
753                )
754                {
755                      mfield_z_sen_data\&.diagonesis_records\&.false_alarm\&.amp_max_exceded\&.cnt++;
756                      mfield_z_sen_data\&.diagonesis_records\&.false_alarm\&.amp_max_exceded\&.accumulated_value
757                      +=(mfield_z_sen_data\&.disturbance_record->event_data\&.buffer\&.signal_level[0]-mfield_z_sen_data\&.configured\&.amp_treshold_max);
758                      mfield_z_sen_data\&.diagonesis_records\&.false_alarm\&.amp_max_exceded\&.recorded_avg
759                      = mfield_z_sen_data\&.diagonesis_records\&.false_alarm\&.amp_max_exceded\&.accumulated_value/
760                              (Float32)mfield_z_sen_data\&.diagonesis_records\&.false_alarm\&.amp_max_exceded\&.cnt;
761               }
762 
763              }else if(mfield_z_sen_data\&.disturbance_record->event_data\&.event_history > EXCEDED_AMP_TH){
764              if(
765                 (mfield_z_sen_data\&.diagonesis_records\&.false_alarm\&.dfdt_max_exceded\&.cnt < RANGE_MAX_8BIT)
766                 &
767                 (mfield_z_sen_data\&.diagonesis_records\&.false_alarm\&.dfdt_max_exceded\&.accumulated_value < RANGE_MAX_32BIT)
768                )
769              {
770 
771                  mfield_z_sen_data\&.diagonesis_records\&.false_alarm\&.dfdt_max_exceded\&.cnt++;
772                  mfield_z_sen_data\&.diagonesis_records\&.false_alarm\&.dfdt_max_exceded\&.accumulated_value
773                  +=(mfield_z_sen_data\&.disturbance_record->event_data\&.buffer\&.change_per_time[0]-mfield_z_sen_data\&.configured\&.dfdt_treshold_max);
774                  mfield_z_sen_data\&.diagonesis_records\&.false_alarm\&.dfdt_max_exceded\&.recorded_avg
775                  = mfield_z_sen_data\&.diagonesis_records\&.false_alarm\&.dfdt_max_exceded\&.accumulated_value/
776                     (Float32)mfield_z_sen_data\&.diagonesis_records\&.false_alarm\&.dfdt_max_exceded\&.cnt;
777 
778              }
779 
780              }
781 
782 }
.fi
.SS "void mfield_z_sen_notifyx (\fBx_notify\fP *notify)"

.PP
mfield module notification function\&. 
.PP
\fBParameters:\fP
.RS 4
\fInotify\fP - system distributed notification 
.RE
.PP

.PP
Definition at line 114 of file mfield_z_sensor\&.c\&.
.PP
References ASSERT, mfield_z_sen_data_t::configured, module_status_mfield_t::current, mfield_z_sen_data_t::disturbance_record, configured_t::element_status_sv_en, sv_error_flags_ut::flags_all, x_notify::message, x_notify_mfield_sen_configure::message, mfield_z_sen_mark_false_postives(), mfield_z_sen_data_t::module_status, state_data_mfield_t::state, STATE_0, mfield_z_sen_data_t::sv_errors_flags, mfield_z_sen_data_t::sv_task_event, mfield_z_sen_data_t::sv_timer_ntf, SV_TIMER_PERIOD, x_delete_timer(), X_MS2TICK, X_NTF_INIT, X_NTF_MFIELD_SENSOR_SV_TIMER, x_schedule_timer(), and x_send_event()\&.
.PP
.nf
115 {
116 
117 
118     switch(notify->message)
119     {
120         case X_NTF_INIT:
121         {
122             mfield_z_sen_init();
123         }break;
124 
125 
126         case X_NTF_MFIELD_Z_SENSOR_CONFIG:
127         {
128 
129               // Algorithm module configuration reading
130               x_notify_mfield_sen_configure * notify_configure = (x_notify_mfield_sen_configure *)notify;
131 
132               // Module configuration
133               mfield_z_sen_data\&.configured = notify_configure->message\&.configured;
134               mfield_z_sen_data\&.disturbance_record = notify_configure->message\&.disturbance_record;
135 
136               // Clear supervison state ( so errors will be reported if module have internal error )
137               mfield_z_sen_data\&.sv_errors_flags\&.flags_all = 0;
138 
139               x_delete_timer(&mfield_z_sen_data\&.sv_timer_ntf);
140 
141               if(mfield_z_sen_data\&.configured\&.element_status_sv_en)
142               x_schedule_timer(&mfield_z_sen_data\&.sv_timer_ntf,X_MS2TICK(SV_TIMER_PERIOD));
143 
144         }break;
145 
146          case X_NTF_CLR_ALARM:
147         {
148            // Algorithm module alarm reset request
149              mfield_z_sen_data\&.module_status\&.current\&.state = STATE_0;
150              mfield_z_sen_mark_false_postives();
151 
152 
153 
154         }break;
155 
156 
157         case X_NTF_MFIELD_SENSOR_SV_TIMER:
158         {
159            x_send_event(&mfield_z_sen_data\&.sv_task_event);
160         }break;
161 
162 
163         default:
164         {
165             ASSERT(0);
166         }
167     }
168 
169 }
.fi
.SS "void mfield_z_sen_sensor_element_sv_task (void)"

.PP
Supervise the status of the mfield sensor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIad_value\fP 
.RE
.PP
Supervises mfield sensors element by measuring sensor respond for different illumination level 
.PP
Definition at line 721 of file mfield_z_sensor\&.c\&.
.PP
Referenced by mfield_z_sen_taskx()\&.
.PP
.nf
722 {
723 
724 
725 }
.fi
.SS "void mfield_z_sen_taskx (\fBx_event\fP *event)"

.PP
mfield sensor module task function\&. 
.PP
\fBParameters:\fP
.RS 4
\fIevent\fP - system distributed event 
.RE
.PP

.PP
Definition at line 73 of file mfield_z_sensor\&.c\&.
.PP
References ASSERT, sv_error_flags_ut::flags_all, x_event::message, x_notify_mfield_sen_sv_report::message, mfield_z_sen_false_positive_correction_task(), mfield_z_sen_sensor_element_sv_task(), x_notify_mfield_sen_sv_report::notify, mfield_z_sen_data_t::sv_errors_flags, mfield_z_sen_data_t::sv_status_ntf, X_MSG_MFIELD_SENSOR_SV, and x_send_notify()\&.
.PP
.nf
74 {
75     switch(event->message)
76     {
77 
78         case X_MSG_MFIELD_SENSOR_SV:
79         {
80             mfield_z_sen_sensor_element_sv_task();
81             mfield_z_sen_false_positive_correction_task();
82 
83             if(mfield_z_sen_data\&.sv_errors_flags\&.flags_all!=0){
84              mfield_z_sen_data\&.sv_status_ntf\&.message\&.error_status_flags = mfield_z_sen_data\&.sv_errors_flags;
85              // Send notification to Algorithm module about error
86              x_send_notify(&mfield_z_sen_data\&.sv_status_ntf\&.notify);
87              mfield_z_sen_data\&.sv_errors_flags\&.flags_all =0;
88             }
89 
90         }break;
91 
92 
93 
94 
95 
96 
97         default:
98         {
99             ASSERT(0);
100         }
101     }
102 }
.fi
.SS "\fBBool\fP mfield_z_zero_cross (void)"

.PP
Claculate\&. 
.PP
\fBParameters:\fP
.RS 4
\fI\fP 
.RE
.PP
TODO: angular freq = 2*PI/(this_time - last_cross_time) 
.PP
Definition at line 203 of file mfield_z_sensor\&.c\&.
.PP
References module_status_mfield_t::current, FALSE, mfield_z_sen_data_t::module_status, state_data_mfield_t::polarity, module_status_mfield_t::previous, and TRUE\&.
.PP
.nf
203                               {
204 
205     if((mfield_z_sen_data\&.module_status\&.previous\&.polarity*mfield_z_sen_data\&.module_status\&.current\&.polarity)<=0)
207     return TRUE;
208     else
209     return FALSE;
210 
211 }
.fi
.SH "Variable Documentation"
.PP 
.SS "\fBmfield_z_sen_data_t\fP mfield_z_sen_data"

.PP
Internal mfield_z_sen module data\&. 
.PP
Definition at line 22 of file mfield_z_sensor\&.c\&.
.SS "\fBx_task_id\fP mfield_z_sen_id"

.PP
Definition at line 23 of file mfield_z_sensor\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for AQ0X from the source code\&.
